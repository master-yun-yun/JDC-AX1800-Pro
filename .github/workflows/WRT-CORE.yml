#云编译公用核心
name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_CONFIG:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_SSID:
        required: true
        type: string
      WRT_WORD:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: true
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_CONFIG: ${{inputs.WRT_CONFIG}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_SSID: ${{inputs.WRT_SSID}}
  WRT_WORD: ${{inputs.WRT_WORD}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_SOURCE: ${{inputs.WRT_SOURCE}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}

jobs:
  core:
    name: ${{inputs.WRT_SOURCE}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq purge firefox
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix python3-netifaces libfuse-dev
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

          sudo mkdir -p /mnt/build_wrt
          sudo chown $USER:$USER /mnt/build_wrt
          sudo ln -s /mnt/build_wrt $GITHUB_WORKSPACE/wrt

      - name: Initialization Values
        run: |
          echo "WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d-%H.%M.%S")" >> $GITHUB_ENV
          echo "WRT_MARK=${GITHUB_REPOSITORY%%/*}" >> $GITHUB_ENV
          echo "WRT_INFO=${WRT_SOURCE%%/*}" >> $GITHUB_ENV
          echo "WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\K[\w]+(?=\=y)' ./Config/$WRT_CONFIG.txt)" >> $GITHUB_ENV
          echo "WRT_KVER=none" >> $GITHUB_ENV
          echo "WRT_LIST=none" >> $GITHUB_ENV

      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/

          cd ./wrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV

          # ---------修改软件源为IPK（新增部分）-------#
          sed -i 's/.apk/.ipk/g' feeds.conf.default

          # GitHub Action 移除国内下载源
          PROJECT_MIRRORS_FILE="./scripts/projectsmirrors.json"
          if [ -f "$PROJECT_MIRRORS_FILE" ]; then
            sed -i '/.cn\//d; /tencent/d; /aliyun/d' "$PROJECT_MIRRORS_FILE"
          fi

# ========== 语言包处理 - 必须在 Clone Code 之后（确保 ./wrt 目录存在）；在 Check Scripts 之前（避免被dos2unix处理） ========== #

      - name: Prepare Language Packs
        run: |
          # 创建目标目录结构
          mkdir -p ./wrt/files/usr/lib/lua/luci/i18n/
          
          # 复制语言包文件到目标目录（直接打包进固件）
          cp -v "$GITHUB_WORKSPACE/Scripts/linkease.zh-cn.lmo" ./wrt/files/usr/lib/lua/luci/i18n/
          cp -v "$GITHUB_WORKSPACE/Scripts/quickstart.zh-cn.lmo" ./wrt/files/usr/lib/lua/luci/i18n/
          cp -v "$GITHUB_WORKSPACE/Scripts/unishare.zh-cn.lmo" ./wrt/files/usr/lib/lua/luci/i18n/
          
          # 验证复制结果
          ls -l ./wrt/files/usr/lib/lua/luci/i18n/
          echo "语言包已直接放置在固件的 /usr/lib/lua/luci/i18n/ 目录"

      - name: Verify Language Pack Placement
        run: |
          echo "验证语言包位置:"
          ls -l ./wrt/files/usr/lib/lua/luci/i18n/*.lmo
          [ $(ls ./wrt/files/usr/lib/lua/luci/i18n/*.lmo | wc -l) -eq 3 ] || {
            echo "::error::语言包文件数量不正确"
            exit 1
          }
          echo "验证通过：找到3个语言包文件"

# ========== 以上语言包处理------以下原有编译步骤 ========== #

      - name: Check Scripts
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Check Caches
        id: check-cache
        if: env.WRT_TEST != 'true'
        uses: actions/cache@main
        with:
          key: ${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-${{env.WRT_HASH}}
          restore-keys: ${{env.WRT_CONFIG}}-${{env.WRT_INFO}}
          path: |
            ./wrt/.ccache
            ./wrt/staging_dir/host*
            ./wrt/staging_dir/tool*

      - name: Update Caches
        if: env.WRT_TEST != 'true'
        run: |
          if [ -d "./wrt/staging_dir" ]; then
            find "./wrt/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
              find "$DIR" -type f -exec touch {} +
            done

            mkdir -p ./wrt/tmp && echo "1" > ./wrt/tmp/.build

            echo "toolchain skiped done!"
          else
            echo "caches missed!"
          fi

          if ${{steps.check-cache.outputs.cache-hit != 'true'}}; then
            CACHE_LIST=$(gh cache list --key "$WRT_CONFIG-$WRT_INFO" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
              gh cache delete $CACHE_KEY
            done

            echo "caches cleanup done!"
          fi

      - name: Update Feeds
        run: |
          cd ./wrt/

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Packages
        run: |
          cd ./wrt/package/

          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings
        run: |
          cd ./wrt/

          if [[ "${WRT_CONFIG,,}" == *"test"* ]]; then
            cat $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt >> .config
          else
            cat $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt $GITHUB_WORKSPACE/Config/GENERAL.txt >> .config
          fi

          $GITHUB_WORKSPACE/Scripts/Settings.sh

          make defconfig -j$(nproc) && make clean -j$(nproc)

      # 2025.07.02新增：确保cgroupfs-mount被启用（双重保险）
      - name: Ensure cgroupfs-mount
        run: |
          cd ./wrt/
          
          # 检查是否已存在配置
          if ! grep -q "CONFIG_PACKAGE_cgroupfs-mount=y" .config; then
              echo "添加cgroupfs-mount配置"
              echo "CONFIG_PACKAGE_cgroupfs-mount=y" >> .config
          else
              echo "cgroupfs-mount配置已存在，无需添加"
          fi

      - name: Download Packages
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make download -j$(nproc)

      - name: Compile Firmware
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make -j$(nproc) || make -j$(nproc) V=s

      - name: Machine Information
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | grep -E "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./wrt/ && mkdir ./upload/

          cp -f ./.config ./upload/Config-"$WRT_CONFIG"-"$WRT_INFO"-"$WRT_BRANCH"-"$WRT_DATE".txt

          if [[ $WRT_TEST != 'true' ]]; then
            echo "WRT_KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)" >> $GITHUB_ENV
            echo "WRT_LIST=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^luci-(app|theme)[^ ]*' {} \; | tr '\n' ' ')" >> $GITHUB_ENV

            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|sha256sums\|packages\)$" -exec rm -rf {} +

            for FILE in $(find ./bin/targets/ -type f -iname "*$WRT_TARGET*") ; do
              EXT=$(basename $FILE | cut -d '.' -f 2-)
              NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($WRT_TARGET\).*")
              NEW_FILE="$WRT_INFO"-"$WRT_BRANCH"-"$NAME"-"$WRT_DATE"."$EXT"
              mv -f $FILE ./upload/$NEW_FILE
            done

            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;

            make clean -j$(nproc)
          fi

      # 2025.07.02新增：cgroup支持验证（非致命性）
      - name: Verify cgroup Support
        run: |
          cd ./wrt/
          
          echo "======================="
          echo "验证cgroup内核配置:"
          
          # 去重显示配置
          sort -u .config | grep "CONFIG_PACKAGE_cgroupfs-mount" || true
          sort -u .config | grep "CONFIG_PACKAGE_kmod-cgroup-v2" || true
          
          echo "======================="
          echo "验证cgroup启动脚本调整:"
          
          # 改进的路径查找
          CGROUP_INIT=$(find ./package/feeds/packages/ -path "*/cgroupfs-mount/files/cgroupfs-mount.init" 2>/dev/null | head -1)
          if [ -f "$CGROUP_INIT" ]; then
              if grep -q "START=10" "$CGROUP_INIT"; then
                  echo "cgroupfs-mount启动顺序已调整为10"
              else
                  echo "::warning::cgroup启动顺序未调整"
                  echo "当前启动脚本内容:"
                  cat "$CGROUP_INIT"
              fi
          else
              echo "::warning::未找到cgroupfs-mount启动脚本"
          fi
          
          echo "======================="
          echo "验证内核cgroup支持:"
          
          # 更可靠的内核配置文件查找
          KERNEL_CONFIG=$(find bin/targets/ -name "config-*" -o -name "kernel.config" 2>/dev/null | head -1)
          if [ -f "$KERNEL_CONFIG" ]; then
              echo "找到内核配置文件: $KERNEL_CONFIG"
              zgrep -i "cgroup" "$KERNEL_CONFIG" || echo "::warning::内核配置中未找到cgroup相关项"
          else
              echo "::warning::未找到内核配置文件"
              echo "备选查找方案:"
              find bin/targets/ -type f 2>/dev/null | head -n 5
          fi
          
          # 最终确认
          echo "cgroup支持验证完成（结果仅供参考，不影响编译）"

      - name: Release Firmware
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-${{env.WRT_BRANCH}}-${{env.WRT_DATE}}
          files: ./wrt/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            RE-SS-01-亚瑟-wifi、RE-CS-02-雅典娜-wifi！
            请注意选择你需要的设备固件！
            不要问，刷就完事了！

            全系带开源硬件加速，别问了！

            源码：${{env.WRT_REPO}}
            分支：${{env.WRT_BRANCH}}
            提交：${{env.WRT_HASH}}

            配置：${{env.WRT_CONFIG}}
            平台：${{env.WRT_TARGET}}

            登录地址：${{env.WRT_IP}}
            登录密码：${{env.WRT_PW}}

            WIFI名称：${{env.WRT_SSID}}
            WIFI密码：${{env.WRT_WORD}}

            内核版本：${{env.WRT_KVER}}
            插件列表：${{env.WRT_LIST}}
